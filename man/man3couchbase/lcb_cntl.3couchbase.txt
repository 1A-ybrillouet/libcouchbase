= lcb_cntl(3couchbase)
:doctype: manpage
Trond Norbye <trond.norbye@couchbase.com>

NAME
----
lcb_cntl - Tune libcouchbase internals

SYNOPSIS
--------
    cc [ flag ... ] file... -lcouchbase [ library ... ]

    #include <libcouchbase/couchbase.h>
    lcb_error_t lcb_cntl(int mode, lcb_t instance, int cmd, void *arg);

DESCRIPTION
-----------

This function exposes an ioctl/fcntl-like interface to read and write
various configuration properties to and from an lcb_t handle.

*instance*::
    The instance to modify

*mode*::
    One of LCB_CNTL_GET (to retrieve a setting) or LCB_CNTL_SET (to
    modify a setting). Note that not all configuration properties
    support SET.

*cmd*::
    The specific command/property to modify. This is one of the
    LCB_CNTL_* constants defined in this file. Note that it is safe
    (and even recommanded) to use the raw numeric value (i.e. to be
    backwards and forwards compatible with libcouchbase versions), as
    they are not subject to change.
+
Using the actual value may be useful in ensuring your application
will still compile with an older libcouchbase version (though
you may get a runtime error (see return) if the command is not
supported

*arg*::
    The argument passed to the configuration handler. The actual type
    of this pointer is dependent on the command in question.
    Typically for GET operations, the value of 'arg' is set to the
    current configuration value; and for SET operations, the current
    configuration is updated with the contents of *arg.

Available Commands
~~~~~~~~~~~~~~~~~~

*LCB_CNTL_OP_TIMEOUT* '(lcb_uint32_t*)'::
    Set or get operation timeout in microseconds. Default is 2500000
    (2.5 seconds).

        lcb_uint32_t tmo = 3500000;
        lcb_cntl(instance, LCB_CNTL_SET, LCB_CNTL_OP_TIMEOUT, &tmo);

*LCB_CNTL_VIEW_TIMEOUT* '(lcb_uint32_t*)'::
    Set or get view (map/reduce) timeout in microseconds. Default is
    75000000 (75 seconds).

        lcb_uint32_t tmo = 30000000;
        lcb_cntl(instance, LCB_CNTL_SET, LCB_CNTL_VIEW_TIMEOUT, &tmo);

*LCB_CNTL_RBUFSIZE* '(lcb_size_t*)'::
    Set or get default read buffer size (this is not a socket option).
    Default is 32768 bytes.

        lcb_size_t sz = 8192;
        lcb_cntl(instance, LCB_CNTL_SET, LCB_CNTL_RBUFSIZE, &sz);

*LCB_CNTL_WBUFSIZE* '(lcb_size_t*)'::
    Set or get default write buffer size (this is not a socket option).
    Default is 32768 bytes.

        lcb_size_t sz = 8192;
        lcb_cntl(instance, LCB_CNTL_SET, LCB_CNTL_WBUFSIZE, &sz);

*LCB_CNTL_HANDLETYPE* '(lcb_type_t*)'::
    Get the handle type.

        lcb_type_t type;
        lcb_cntl(instance, LCB_CNTL_GET, LCB_CNTL_HANDLETYPE, &type);
        switch (type) {
            case LCB_TYPE_BUCKET:
                printf("handle connected to bucket\n");
                break;
            case LCB_TYPE_CLUSTER:
                printf("handle connected to cluster\n");
                break;
        }

*LCB_CNTL_VBCONFIG* '(VBUCKET_CONFIG_HANDLE*)'::
    Get the handle of the cluster configuration

        #include <libvbucket/vbucket.h>

        VUCKET_CONFIG_HANDLE conf;
        const char *password;

        lcb_cntl(instance, LCB_CNTL_GET, LCB_CNTL_VBCONFIG, &conf);
        password = vbucket_config_get_password(conf);

*LCB_CNTL_IOPS* '(lcb_io_opt_t*)'::
    Get the implementation of IO stucture (the plugin gist)

        lcb_io_opt_t io;
        lcb_cntl(instance, LCB_CNTL_GET, LCB_CNTL_IOPS, &io);
        printf("IO plugin version %d\n", io->version);
        if (io->version == 0) {
            io->v.v0.run_event_loop(io);
        }

*LCB_CNTL_VBMAP* '(lcb_cntl_vbinfo_t*)'::
    Get the vBucket ID for a given key, based on the current configuration
    The 'vbucket' field in he structure will be modified.
+
Structure layout:
+

        typedef struct lcb_cntl_vbinfo_st lcb_cntl_vbinfo_t;
        struct lcb_cntl_vbinfo_st {
            int version;
            union {
                struct {
                    /** Input parameters */
                    const void *key;
                    lcb_size_t nkey;
                    /** Output */
                    int vbucket;
                    int server_index;
                } v0;
            } v;
        };
+
Example:
+
        char key[] = "foo";
        lcb_cntl_vbinfo_t info;

        info.version = 0;
        info.v.v0.key = key;
        info.v.v0.nkey = strlen(key);

        lcb_cntl(instance, LCB_CNTL_GET, LCB_CNTL_VBMAP, &info);
        printf("vBucket ID of \"%s\" is %d\n", key, info.v.v0.vbucket);


*LCB_CNTL_MEMDNODE_INFO* 'lcb_cntl_server_t*'::
    Get information about a memcached node. Note that all fields in
    this structure are ready only and are only valid until one of the
    following happens:

    1. Another libcouchbase API function is called
    2. The IOPS loop regains control

+
Structure layout:
+
        typedef struct lcb_cntl_server_st lcb_cntl_server_t;
        struct lcb_cntl_server_st {
            int version;
            union {
                struct {
                    /** Server index to query */
                    int index;
                    /** NUL-terminated string containing the address */
                    const char *host;
                    /** NUL-terminated string containing the port */
                    const char *port;
                    /** Whether the node is connected */
                    int connected;
                    /**
                     * Socket information. If a v0 IO plugin is being
                     * used, the sockfd is set to the socket
                     * descriptor. If a v1 plugin is being used, the
                     * sockptr is set to point to the appropriate
                     * structure.
                     *
                     * Note that you *MAY* perform various
                     * 'setsockopt' calls on the sockfd (though it is
                     * your responsibility to ensure those options are
                     * valid); however the actual socket descriptor
                     * may change in the case of a cluster
                     * configuration update.
                     */
                    union {
                        lcb_socket_t sockfd;
                        lcb_sockdata_t *sockptr;
                    } sock;
                } v0;
            } v;
        };
+
Example:
+
        lcb_cntl_server_t node;

        node.version = 0;
        node.v.v0.index = 0; /* first node */

        lcb_cntl(instance, LCB_CNTL_GET, LCB_CNTL_MEMDNODE_INFO, &node);
        printf("node \"%s:%s\" is %s\n", node.v.v0.host, node.v.v0.port,
               node.v.v0.connected ? "connected" : "is not connected");

*LCB_CNTL_CONFIGNODE_INFO* '(lcb_io_opt_t*)'::
    Get information about the configuration node. Semantics of
    LCB_CNTL_MEMDNODE_INFO apply here as well, but v.v0.index field is
    ignored, obviously.

        lcb_cntl_server_t node;

        node.version = 0;

        lcb_cntl(instance, LCB_CNTL_GET, LCB_CNTL_CONFIGNODE_INFO, &node);
        printf("listening configuration from \"%s:%s\"\n",
               node.v.v0.host, node.v.v0.port);

*LCB_CNTL_SYNCMODE* '(lcb_syncmode_t*)'::
    Set or get "synchmode" behaviour. The following synchronous models
    are defined (default LCB_ASYNCHRONOUS):
+
|=======================================
| LCB_ASYNCHRONOUS |
This is the default and all calls to libcouchbase are non-blocking
(except for lcb_wait().
| LCB_SYNCHRONOUS  |
In synchronous mode the function will block until either the operation
is complete, or a hard error occurs. Operating in synchronous mode is
the same as calling lcb_wait() after each function call.
|=======================================

        lcb_syncmode_t mode = LCB_SYNCHRONOUS;
        lcb_cntl(instance, LCB_CNTL_SET, LCB_CNTL_SYNCMODE, &mode);

*LCB_CNTL_IP6POLICY* '(lcb_ipv6_t*)'::
    Get or set IPv4/IPv6 selection policy. The following settings for
    IPv6 is defined (default LCB_IPV6_DISABLED):
+
|=======================================
| LCB_IPV6_DISABLED | Disable all use of IPv6.
| LCB_IPV6_ONLY     | Disable all use of IPv4, and only connect to IPv6 hosts
| LCB_IPV6_ALLOW    | Allow a mix of IPv4 and IPv6.
|=======================================

        lcb_ipv6_t mode = LCB_IPV6_ALLOW;
        lcb_cntl(instance, LCB_CNTL_SET, LCB_CNTL_IP6POLICY, &mode);

*LCB_CNTL_CONFERRTHRESH* '(lcb_size_t*)'::
    Get or set the configuration error threshold. This number
    indicates how many network/mapping/not-my-vbucket errors are
    received before a configuration update is requested again (default
    100).

        lcb_size_t num_events = 10;
        lcb_cntl(instance, LCB_CNTL_SET, LCB_CNTL_CONFERRTHRESH, &num_events);

*LCB_CNTL_DURABILITY_TIMEOUT* '(lcb_uint32_t*)'::
    Get or set the default timeout for durability operations.
    Default is 5000000 (5 seconds)

        lcb_uint32_t tmo = 7500000; /* 7.5 seconds */
        lcb_cntl(instance, LCB_CNTL_SET, LCB_CNTL_DURABILITY_TIMEOUT, &tmo);

*LCB_CNTL_DURABILITY_INTERVAL* '(lcb_uint32_t*)'::
    Get or set the default durability polling interval
    Default is 100000 (10 milliseconds)

        lcb_uint32_t tmo = 50000; /* 5 milliseconds */
        lcb_cntl(instance, LCB_CNTL_SET, LCB_CNTL_DURABILITY_INTERVAL, &tmo);

RETURN VALUE
------------

LCB_NOT_SUPPORTED if the code is unrecognized LCB_EINVAL if there was
a problem with the argument (typically for SET) other error codes
depending on the command.


ATTRIBUTES
----------
See lcb_attributes(5) for descriptions of the following attributes:

[options="header"]
|=======================================
| ATTRIBUTE TYPE      | ATTRIBUTE VALUE
| Interface Stability | Committed
| MT-Level            | MT-Safe
|=======================================

COPYRIGHT
---------
Copyright 2010-2013 Couchbase, Inc.

SEE ALSO
--------
Learn more at <http://www.couchbase.com/communities/c>.

libcouchbase(3lib), lcb_create(3couchbase), lcb_attributes(5)
