'\" te
.\"
.\"     Copyright 2011 Couchbase, Inc.
.\"
.\"   Licensed under the Apache License, Version 2.0 (the "License");
.\"   you may not use this file except in compliance with the License.
.\"   You may obtain a copy of the License at
.\"
.\"       http://www.apache.org/licenses/LICENSE-2.0
.\"
.\"   Unless required by applicable law or agreed to in writing, software
.\"   distributed under the License is distributed on an "AS IS" BASIS,
.\"   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
.\"   See the License for the specific language governing permissions and
.\"   limitations under the License.
.\"
.TH libcouchbase 3LIB "28 August 2011" "Couchbase 2.0" "Interface Libraries"
.SH NAME
libcouchbase \- distributed object-caching library
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR... ] \fIfile\fR... \fB-lcouchbase\fR [ \fIlibrary\fR... ]
#include <\fBlibcouchbase/couchbase.h\fR>
.fi

.SH DESCRIPTION
.sp
.LP
Functions in this library provide access to a Couchbase cluster.
.sp
.SH INTERFACES
.sp
.LP
The header file \fBlibcouchbase/couchbase.h\fR provides the public interfaces defined below.
.sp

.sp
.TS
tab();
lw(2.75i) lw(2.75i)
lw(2.75i) lw(2.75i)
.
\fBlibcouchbase_arithmetic\fR\fBlibcouchbase_arithmetic_by_key\fR
\fBlibcouchbase_connect\fR\fBlibcouchbase_create\fR
\fBlibcouchbase_destroy\fR\fBlibcouchbase_wait\fR
\fBlibcouchbase_get_cookie\fR\fBlibcouchbase_get_last_error\fR
\fBlibcouchbase_mget\fR\fBlibcouchbase_mget_by_key\fR
\fBlibcouchbase_mtouch\fR\fBlibcouchbase_mtouch_by_key\fR
\fBlibcouchbase_remove\fR\fBlibcouchbase_remove_by_key\fR
\fBlibcouchbase_set_arithmetic_callback\fR\fBlibcouchbase_set_cookie\fR
\fBlibcouchbase_set_error_callback\fR\fBlibcouchbase_set_get_callback\fR
fBlibcouchbase_set_remove_callback\fR
\fBlibcouchbase_set_storage_callback\fR\fBlibcouchbase_set_tap_deletion_callback\fR
\fBlibcouchbase_set_tap_flush_callback\fR\fBlibcouchbase_set_tap_mutation_callback\fR
\fBlibcouchbase_set_tap_opaque_callback\fR\fBlibcouchbase_set_tap_vbucket_set_callback\fR
\fBlibcouchbase_set_touch_callback\fR\fBlibcouchbase_store\fR
\fBlibcouchbase_store_by_key\fR\fBlibcouchbase_tap_cluster\fR
\fBlibcouchbase_tap_filter_create\fR\fBlibcouchbase_tap_filter_destroy\fR
\fBlibcouchbase_tap_filter_get_backfill\fR\fBlibcouchbase_tap_filter_get_keys_only\fR
\fBlibcouchbase_tap_filter_set_backfill\fR\fBlibcouchbase_tap_filter_set_keys_only\fR
\fBlibcouchbase_create_io_ops\fR
.TE

.SH EXAMPLES
.LP

The following is an example of a small program that connects to a
server to store a single kvpair and reads the value back out
again. Error handling is omitted in order to keep the example simple.

.sp
.in +2
.nf

#include <libcouchbase/couchbase.h>

/* Function that is called when the store operation completes */
static void storage_callback(libcouchbase_t instance,
                             const void *cookie,
                             libcouchbase_storage_t operation,
                             libcouchbase_error_t error,
                             const void *key, size_t nkey,
                             uint64_t cas)
{
    if (error == LIBCOUCHBASE_SUCCESS) {
        fwrite(key, nkey, 1, stdout);
        fprintf(stdout, " successfully stored\n");
    } else {
        fprintf(stderr, "Failed to store \"");
        fwrite(key, nkey, 1, stderr);
        fprintf(stderr, "\": %s\n", libcouchbase_strerror(instance, error));
    }
}

/* Function that is called when the get operation completes */
static void get_callback(libcouchbase_t instance,
                         const void *cookie,
                         libcouchbase_error_t error,
                         const void *key, size_t nkey,
                         const void *bytes, size_t nbytes,
                         uint32_t flags, uint64_t cas)
{
    if (error == LIBCOUCHBASE_SUCCESS) {
        fprintf(stdout, "Found \"");
        fwrite(key, nkey, 1, stdout);
        fprintf(stdout, "\" size: %zu flags %04x cas: %"PRIu64"\n",
                nbytes, flags, cas);
        fwrite(bytes, nbytes, 1, stdout);
    } else {
        fprintf(stderr, "Failed to get \"");
        fwrite(key, nkey, 1, stderr);
        fprintf(stderr, "\": %s\n" libcouchbase_strerror(instance, error));
    }
}

int main(int argc, char **argv)
{

    \|.\|.\|.

    struct libcouchbase_io_opt_st *io;
    io = libcouchbase_create_io_ops(LIBCOUCHBASE_IO_OPS_DEFAULT, NULL, NULL);
    libcouchbase_t instance = libcouchbase_create(host, username,
                                                  passwd, bucket, io);
    libcouchbase_connect(instance);
    libcouchbase_set_storage_callback(instance, storage_callback);
    libcouchbase_set_get_callback(instance, get_callback);

    char *keys[1];
    size_t nkey[1];
    keys[0] = "key";
    nkey[0] = 3;

    libcouchbase_store(instance, NULL, LIBCOUCHBASE_SET, keys[0], nkey[0],
                       "value", 5, 0, 0, 0);

    libcouchbase_mget(instance, NULL, 1, (const void * const *)keys,
                      nkey, NULL);

    /* Wait until all of the operations complete */
    libcouchbase_wait(instance);
    libcouchbase_destroy(instance);

    return 0;
}
.fi
.in -2

.SH FILES
.sp
.ne 2
.mk
.na
\fB\fBinclude/libcouchbase/couchbase.h\fR\fR
.ad
.RS 34n
.rt
Header file defining the programming interface
.RE
.ne 2
.mk
.na
\fB\fBlib/libcouchbase.so\fR\fR
.ad
.RS 34n
.rt
shared object
.RE
.ne 2
.mk
.na
\fB\fBlib/64/libcouchbase.so\fR\fR
.ad
.RS 34n
.rt
64-bit shared object
.RE

.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityUncommitted
.TE

.SH SEE ALSO
.sp
.LP
\fBcouchbase.h\fR(3HEAD), \fBattributes\fR(5)
